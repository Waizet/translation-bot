import os
import logging
import time
from telegram import Update, ForceReply
from telegram.ext import (
    Application, 
    MessageHandler, 
    filters, 
    ContextTypes, 
    CommandHandler
)
from deep_translator import GoogleTranslator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = "7633931968:AAGQkVmPC9rBNes65CyRoBIU8MR1OTEJF3Y"

LANGUAGES = {
    "—Ä—É—Å—Å–∫–∏–π": "ru",
    "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π": "uk",
    "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "en",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç {user.first_name}! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.\n"
        "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏ —è–∑—ã–∫: /setlang —Ä—É—Å—Å–∫–∏–π"
    )

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang_name = " ".join(context.args).lower() if context.args else ""
    
    if lang_name in LANGUAGES:
        user_data[user_id] = {"language": LANGUAGES[lang_name]}
        await update.message.reply_text(f"‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang_name.capitalize()}")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫! –ü—Ä–∏–º–µ—Ä: /setlang —Ä—É—Å—Å–∫–∏–π")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    
    if user_id not in user_data or not user_data[user_id].get("language"):
        await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —è–∑—ã–∫ –∫–æ–º–∞–Ω–¥–æ–π /setlang")
        return
        
    target_lang = user_data[user_id]["language"]
    try:
        translated = GoogleTranslator(source='auto', target=target_lang).translate(text)
        await update.message.reply_text(f"üåê –ü–µ—Ä–µ–≤–æ–¥:\n{translated}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ")

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setlang", set_language))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
